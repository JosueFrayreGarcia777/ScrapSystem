using Microsoft.Data.SqlClient;
using System.Configuration;
using System.Data;

namespace ScrapSystemm
{
    public partial class Form1 : Form
    {
        private readonly string _DBConnection =
            ConfigurationManager.ConnectionStrings["DBConnection"]?.ConnectionString ??
            throw new InvalidOperationException("Connection string 'DBConnection' not found.");

        // Tabla de boleta en memoria
        private readonly DataTable _boleta = new DataTable();
        private DataGridView? _gridBOM;
        private BoletaForm? _boletaForm;

        public Form1()
        {
            InitializeComponent();
            this.Load += Form1_Load;

            // Foco inicial al abrir la app: escanear inmediatamente
            this.Shown += (s, e) =>
            {
                txtBuscar.Focus();
                txtBuscar.SelectAll();
            };

            txtBuscar.KeyDown += TxtBuscar_KeyDown;

            btnBuscar.Click += BtnBuscar_Click;

            // eventos para la nueva búsqueda por TRW explícito
            btnBuscar2.Click += BtnBuscar2_Click;
            txtBuscar2.KeyDown += async (s, e) =>
            {
                if (e.KeyCode == Keys.Enter)
                {
                    e.SuppressKeyPress = true;
                    await BuscarBOMPorTRWAsync();
                }
            };

            // columnas _boleta...
            _boleta.Columns.Add("Turno", typeof(string));
            _boleta.Columns.Add("Linea", typeof(string));
            _boleta.Columns.Add("NumeroParte", typeof(string));
            _boleta.Columns.Add("ComponenteCodigo", typeof(string));
            _boleta.Columns.Add("Componente", typeof(string));
            _boleta.Columns.Add("DescripcionDefecto", typeof(string));
            _boleta.Columns.Add("Cantidad", typeof(decimal));
            _boleta.Columns.Add("Unidad", typeof(string));
            _boleta.Columns.Add("RegistroId", typeof(string));
            _boleta.Columns.Add("Omitido", typeof(bool)); // nuevos: marcar componentes con qty=0
            _boleta.Columns.Add("Origen", typeof(string)); // NUEVO: separar origen de captura


            btnBoleta.Click += Button1_Click;
            btnVerBoleta.Click += BtnVerBoleta_Click;
        }

        private void BtnVerBoleta_Click(object? sender, EventArgs e)
        {
            MostrarBoletaForm();
        }

        private void MostrarBoletaForm()
        {
            // Mostrar SIEMPRE todo lo capturado en la bitácora (sin filtros)
            var turno = string.Empty;
            var linea = string.Empty;
            var numeroParte = string.Empty;

            if (_boletaForm == null || _boletaForm.IsDisposed)
            {
                _boletaForm = new BoletaForm(_boleta, turno, linea, numeroParte);
                _boletaForm.StartPosition = FormStartPosition.CenterParent;
                _boletaForm.FormClosed += (s, args) => _boletaForm = null;
                _boletaForm.Show(this);
            }
            else
            {
                _boletaForm.ApplyFilter(turno, linea, numeroParte);
                _boletaForm.BringToFront();
            }
        }

        private void Button1_Click(object? sender, EventArgs e)
        {
            if (_gridBOM is null)
            {
                MessageBox.Show("Primero genera la BOM.", "Aviso", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            var turno = txtTurno.Text?.Trim() ?? string.Empty;
            if (string.IsNullOrEmpty(turno))
            {
                MessageBox.Show("No se pudo determinar el turno.", "Aviso", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            var linea = txtLinea.Text?.Trim() ?? string.Empty;
            var numeroParte = txtNumber.Text?.Trim() ?? string.Empty;
            var defecto = txtDefecto.Text?.Trim() ?? string.Empty;

            // Resolver columnas de código, descripción, cantidad y unidad
            var codeCol = _gridBOM.Columns["Component"]
                         ?? _gridBOM.Columns.Cast<DataGridViewColumn>()
                              .FirstOrDefault(c => string.Equals(c.DataPropertyName, "Component", StringComparison.OrdinalIgnoreCase));
            var descCol = _gridBOM.Columns["MaterialDescription"]
                          ?? _gridBOM.Columns.Cast<DataGridViewColumn>()
                               .FirstOrDefault(c => string.Equals(c.DataPropertyName, "MaterialDescription", StringComparison.OrdinalIgnoreCase));
            var qtyCol = _gridBOM.Columns["ComponentQuantity"]
                         ?? _gridBOM.Columns.Cast<DataGridViewColumn>()
                              .FirstOrDefault(c => string.Equals(c.DataPropertyName, "ComponentQuantity", StringComparison.OrdinalIgnoreCase));
            var unitCol = _gridBOM.Columns["ComponentUnity"]
                          ?? _gridBOM.Columns.Cast<DataGridViewColumn>()
                               .FirstOrDefault(c => string.Equals(c.DataPropertyName, "ComponentUnity", StringComparison.OrdinalIgnoreCase));

            if (codeCol is null || descCol is null || qtyCol is null || unitCol is null)
            {
                MessageBox.Show("No se encontraron columnas de BOM necesarias (Component/MaterialDescription/ComponentQuantity/ComponentUnity).", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            // Generar un RegistroId para este 'tiro' completo
            var registroId = Guid.NewGuid().ToString();

            int agregados = 0;
            int omitidos = 0;
            foreach (DataGridViewRow row in _gridBOM.Rows)
            {
                if (row.IsNewRow) continue;

                // unidad obligatoria: si está vacía, ignorar por completo
                var unidad = Convert.ToString(row.Cells[unitCol.Index].Value)?.Trim() ?? string.Empty;
                if (string.IsNullOrWhiteSpace(unidad))
                {
                    continue; // no agregar ni mostrar componentes sin unidad
                }

                // cantidad
                decimal qty = 0;
                var qtyObj = row.Cells[qtyCol.Index].Value;
                if (qtyObj != null && qtyObj != DBNull.Value)
                {
                    decimal.TryParse(Convert.ToString(qtyObj), out qty);
                }

                var componenteDesc = Convert.ToString(row.Cells[descCol.Index].Value) ?? string.Empty;
                if (string.IsNullOrWhiteSpace(componenteDesc)) continue;
                var componenteCod = Convert.ToString(row.Cells[codeCol.Index].Value) ?? string.Empty;

                var newRow = _boleta.NewRow();
                newRow["Turno"] = turno;
                newRow["Linea"] = linea;
                newRow["NumeroParte"] = numeroParte;
                newRow["ComponenteCodigo"] = componenteCod;
                newRow["Componente"] = componenteDesc;
                newRow["DescripcionDefecto"] = defecto;
                newRow["Cantidad"] = qty;
                newRow["Unidad"] = unidad;
                newRow["RegistroId"] = registroId;
                newRow["Omitido"] = qty <= 0; // marcar omitidos
                newRow["Origen"] = "RECHAZO"; // marcar origen
                _boleta.Rows.Add(newRow);

                if (qty > 0) agregados++; else omitidos++;
            }

            if (agregados == 0 && omitidos == 0)
            {
                MessageBox.Show("No hay componentes válidos en la BOM (todos sin unidad).", "Aviso", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            // Mostrar/actualizar la ventana de boleta
            MostrarBoletaForm();

            // Reiniciar formulario (excepto turno que es calculado en próxima lectura)
            txtBuscar.Clear();
            txtLinea.Clear();
            txtNumber.Clear();
            txtStatus.Clear();
            txtOperacion.Clear();
            txtDefecto.Clear();
            txtTurno.Clear();
            panel2.Controls.Clear();
            _gridBOM = null;
            txtBuscar.Focus();
        }

        private void pictureBox1_Click(object sender, EventArgs e)
        {

        }

        private void panel1_Paint(object sender, PaintEventArgs e)
        {
            this.panel1.BackColor = Color.FromArgb(41, 41, 41);
        }

        private async void Form1_Load(object sender, EventArgs e)
        {
            this.WindowState = FormWindowState.Maximized; // Maximiza la ventana al cargar
            try
            {
                await using var conn = new SqlConnection(_DBConnection);
                await conn.OpenAsync();

                await conn.CloseAsync();
            }
            catch (Exception ex)
            {
                MessageBox.Show($"DB connection failed : {ex.Message}", "Error",
                    MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private async void BtnBuscar_Click(object? sender, EventArgs e)
        {
            await BuscarYLLenarAsync();
        }

        private async void TxtBuscar_KeyDown(object? sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                e.SuppressKeyPress = true;
                await BuscarYLLenarAsync();
            }
        }

        private static string CalcularTurnoPorHoraInt(int hour24)
        {
            // Normaliza 24 -> 0 (medianoche)
            if (hour24 == 24) hour24 = 0;
            if (hour24 < 0 || hour24 > 24) return string.Empty;

            // Reglas por rangos con hora entera (sin minutos):
            // A: 07:00 - 16:59 => 7..16
            // B: 17:00 - 01:59 => 17..24 y 1
            // C: 02:00 - 06:59 => 2..6
            if (hour24 >= 7 && hour24 <= 16) return "A";
            if (hour24 == 1 || hour24 >= 17 || hour24 == 0) return "B"; // incluye 0 (=24)
            return "C"; // 2..6
        }

        private static string CalcularTurnoPorHora(TimeSpan hora)
        {
            var t0700 = new TimeSpan(7, 0, 0);
            var t1630 = new TimeSpan(16, 30, 0);
            var t0100 = new TimeSpan(1, 0, 0);

            if (hora >= t0700 && hora < t1630) return "A";
            if (hora >= t1630 || hora < t0100) return "B";
            return "C";
        }

        private static object? GetValueIfExists(IDataRecord record, string columnName)
        {
            for (int i = 0; i < record.FieldCount; i++)
            {
                if (string.Equals(record.GetName(i), columnName, StringComparison.OrdinalIgnoreCase))
                {
                    return record.IsDBNull(i) ? null : record.GetValue(i);
                }
            }
            return null;
        }

        private async Task BuscarYLLenarAsync()
        {
            var codigo = txtBuscar.Text?.Trim();
            if (string.IsNullOrWhiteSpace(codigo))
            {
                LimpiarCampos();
                return;
            }

            try
            {
                await using var conn = new SqlConnection(_DBConnection);
                await conn.OpenAsync();

                // Traer fila y usar la columna Hour (1..24) para el turno (sin ORDER BY Id)
                var sql = @"SELECT TOP(1) * FROM [dbo].[LineRejects] WHERE [RejectCode] = @code";

                await using var cmd = new SqlCommand(sql, conn);
                cmd.Parameters.Add(new SqlParameter("@code", System.Data.SqlDbType.NVarChar, 100) { Value = codigo });

                await using var reader = await cmd.ExecuteReaderAsync(CommandBehavior.SingleRow);
                if (await reader.ReadAsync())
                {
                    txtLinea.Text = Convert.ToString(GetValueIfExists(reader, "Line"));
                    txtNumber.Text = Convert.ToString(GetValueIfExists(reader, "TRWNumber"));

                    var statusRaw = Convert.ToString(GetValueIfExists(reader, "Status"));
                    txtStatus.Text = TraducirStatus(statusRaw);

                    txtOperacion.Text = Convert.ToString(GetValueIfExists(reader, "WorkOperationNameES"));
                    txtDefecto.Text = Convert.ToString(GetValueIfExists(reader, "RejectTypeNameES"));

                    // Calcular turno basado en columna Hour (1..24)
                    string turno = string.Empty;
                    var hourVal = GetValueIfExists(reader, "Hour");
                    if (hourVal != null)
                    {
                        int h;
                        if (hourVal is int ih) h = ih;
                        else if (hourVal is long l) h = (int)l;
                        else if (hourVal is short s) h = s;
                        else if (int.TryParse(Convert.ToString(hourVal), out var parsedH)) h = parsedH;
                        else h = DateTime.Now.Hour;
                        turno = CalcularTurnoPorHoraInt(h);
                    }
                    else
                    {
                        // Fallback por si no existe Hour
                        var candidates = new[] { "Time", "Hora", "DateTime", "Datetime", "FechaHora", "Fecha", "Date", "CreatedAt", "CreatedOn", "InsertDate", "InsertedAt", "RejectTime", "RejectDate", "RejectDateTime", "Timestamp" };
                        TimeSpan hora = DateTime.Now.TimeOfDay;
                        foreach (var col in candidates)
                        {
                            var val = GetValueIfExists(reader, col);
                            if (val == null) continue;
                            if (val is TimeSpan ts) { hora = ts; break; }
                            if (val is DateTime dt) { hora = dt.TimeOfDay; break; }
                            if (TimeSpan.TryParse(Convert.ToString(val), out var ts2)) { hora = ts2; break; }
                            if (DateTime.TryParse(Convert.ToString(val), out var dt2)) { hora = dt2.TimeOfDay; break; }
                        }
                        turno = CalcularTurnoPorHora(hora);
                    }

                    txtTurno.Text = turno;
                }
                else
                {
                    LimpiarCampos();
                    MessageBox.Show("No se encontraron datos para el código.", "Sin resultados", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error al buscar: {ex.Message}", "Error",
                    MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private static string TraducirStatus(string? status)
        {
            return status?.Trim().ToUpperInvariant() switch
            {
                "C" => "recibido",
                "O" => "no recibido",
                _ => string.IsNullOrEmpty(status) ? string.Empty : status
            };
        }

        private void LimpiarCampos()
        {
            txtLinea.Clear();
            txtNumber.Clear();
            txtStatus.Clear();
            txtOperacion.Clear();
            txtDefecto.Clear();
            txtTurno.Clear();
        }

        private void panel2_Paint(object sender, PaintEventArgs e)
        {

        }

        private async void btnBOM_Click(object sender, EventArgs e)
        {
            await GenerarBOMAsync();
        }

        private static string ExtraerMaterialBase(string? trwNumber)
        {
            if (string.IsNullOrWhiteSpace(trwNumber)) return string.Empty;
            var val = trwNumber.Trim();
            var idx = val.IndexOf('-');
            return idx > 0 ? val.Substring(0, idx) : val;
        }

        private async Task GenerarBOMAsync()
        {
            var pieza = txtNumber.Text?.Trim();
            if (string.IsNullOrWhiteSpace(pieza))
            {
                MessageBox.Show("Ingrese o seleccione un TRWNumber antes de generar la BOM.", "Aviso", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            var materialBase = ExtraerMaterialBase(pieza);
            if (string.IsNullOrEmpty(materialBase))
            {
                MessageBox.Show("El TRWNumber es inválido.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            try
            {
                await using var conn = new SqlConnection(_DBConnection);
                await conn.OpenAsync();

                var sql = @"SELECT [Component], [MaterialDescription], [ComponentQuantity], [ComponentUnity]
                            FROM [dbo].[BOM]
                            WHERE [Material] = @material";

                await using var cmd = new SqlCommand(sql, conn);
                cmd.Parameters.Add(new SqlParameter("@material", SqlDbType.VarChar, 100) { Value = materialBase });

                var table = new DataTable();
                table.Columns.Add("Component", typeof(string));
                table.Columns.Add("MaterialDescription", typeof(string));
                table.Columns.Add("ComponentQuantity", typeof(decimal));
                table.Columns.Add("ComponentUnity", typeof(string));

                await using var reader = await cmd.ExecuteReaderAsync();
                while (await reader.ReadAsync())
                {
                    var compCode = reader["Component"]?.ToString() ?? string.Empty;
                    var desc = reader["MaterialDescription"]?.ToString() ?? string.Empty;
                    var qtyObj = reader["ComponentQuantity"];
                    decimal qty = 0;
                    if (qtyObj != DBNull.Value) qty = Convert.ToDecimal(qtyObj);
                    var unity = (reader["ComponentUnity"]?.ToString() ?? string.Empty).Trim();

                    // excluir componentes sin unidad (vacía)
                    if (string.IsNullOrWhiteSpace(unity))
                        continue;

                    table.Rows.Add(compCode, desc, qty, unity);
                }

                RenderBOMEnPanel(table);

                if (table.Rows.Count == 0)
                {
                    MessageBox.Show("No se encontraron componentes con unidad para el material base.", "Sin resultados", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error al generar BOM: {ex.Message}", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void RenderBOMEnPanel(DataTable datos)
        {
            panel2.SuspendLayout();
            try
            {
                panel2.Controls.Clear();

                var grid = new DataGridView
                {
                    Dock = DockStyle.Fill,
                    ReadOnly = false,
                    AutoGenerateColumns = false,
                    AllowUserToAddRows = false,
                    AllowUserToDeleteRows = false,
                    RowHeadersVisible = false,
                    SelectionMode = DataGridViewSelectionMode.CellSelect,
                    EditMode = DataGridViewEditMode.EditOnEnter
                };


                var colCode = new DataGridViewTextBoxColumn
                {
                    Name = "Component",
                    DataPropertyName = "Component",
                    HeaderText = "Codigo",
                    Visible = false
                };
                var colDesc = new DataGridViewTextBoxColumn
                {
                    Name = "MaterialDescription",
                    DataPropertyName = "MaterialDescription",
                    HeaderText = "Material Description",
                    AutoSizeMode = DataGridViewAutoSizeColumnMode.Fill,
                    ReadOnly = true,
                    SortMode = DataGridViewColumnSortMode.NotSortable
                };

                var colQty = new DataGridViewNumericUpDownColumn
                {
                    Name = "ComponentQuantity",
                    DataPropertyName = "ComponentQuantity",
                    HeaderText = "Qty",
                    Width = 100,
                    ReadOnly = false,
                    DecimalPlaces = 3,
                    Increment = 0.001m,
                    Minimum = 0m,
                    Maximum = 1000000m,
                    ThousandsSeparator = false
                };

                var colUnit = new DataGridViewTextBoxColumn
                {
                    Name = "ComponentUnity",
                    DataPropertyName = "ComponentUnity",
                    HeaderText = "Unit",
                    Width = 80,
                    ReadOnly = true,
                    SortMode = DataGridViewColumnSortMode.NotSortable
                };

                grid.Columns.Add(colCode);
                grid.Columns.Add(colDesc);
                grid.Columns.Add(colQty);
                grid.Columns.Add(colUnit);


                grid.CellEnter += (s, e) =>
                {
                    if (e.ColumnIndex == colQty.Index && e.RowIndex >= 0)
                    {
                        grid.BeginEdit(true);
                    }
                };

                grid.DataBindingComplete += (s, e) =>
                {
                    if (grid.Rows.Count > 0)
                    {
                        grid.CurrentCell = grid.Rows[0].Cells[colQty.Index];
                        grid.BeginEdit(true);
                    }
                };

                grid.DataError += (s, e) =>
                {

                    e.Cancel = true;
                };

                grid.KeyDown += (s, e) =>
                {
                    if (e.KeyCode == Keys.Delete)
                    {
                        foreach (DataGridViewCell cell in grid.SelectedCells)
                        {
                            if (cell.OwningColumn.DataPropertyName == "ComponentQuantity" && !cell.ReadOnly)
                            {
                                cell.Value = 0m;
                            }
                        }
                        e.Handled = true;
                    }
                };

                grid.DataSource = datos;
                panel2.Controls.Add(grid);


                _gridBOM = grid;
            }
            finally
            {
                panel2.ResumeLayout();
            }
        }

        private async void BtnBuscar2_Click(object? sender, EventArgs e)
        {
            await BuscarBOMPorTRWAsync();
        }

        private async Task BuscarBOMPorTRWAsync()
        {
            var trw = txtBuscar2.Text?.Trim();
            if (string.IsNullOrWhiteSpace(trw))
            {
                MessageBox.Show("Ingrese un TRWNumber.", "Aviso", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            var materialBase = ExtraerMaterialBase(trw);
            if (string.IsNullOrEmpty(materialBase))
            {
                MessageBox.Show("El TRWNumber es inválido.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            try
            {
                await using var conn = new SqlConnection(_DBConnection);
                await conn.OpenAsync();

                var sql = @"SELECT [Component], [MaterialDescription], [ComponentUnity]
                            FROM [dbo].[BOM]
                            WHERE [Material] = @material";

                await using var cmd = new SqlCommand(sql, conn);
                cmd.Parameters.Add(new SqlParameter("@material", SqlDbType.VarChar, 100) { Value = materialBase });

                var table = new DataTable();
                table.Columns.Add("Component", typeof(string));
                table.Columns.Add("MaterialDescription", typeof(string));
                table.Columns.Add("ComponentUnity", typeof(string));

                await using var reader = await cmd.ExecuteReaderAsync();
                while (await reader.ReadAsync())
                {
                    var compCode = reader["Component"]?.ToString() ?? string.Empty;
                    var desc = reader["MaterialDescription"]?.ToString() ?? string.Empty;
                    var unity = (reader["ComponentUnity"]?.ToString() ?? string.Empty).Trim();

                    if (string.IsNullOrWhiteSpace(unity))
                        continue;

                    table.Rows.Add(compCode, desc, unity);
                }

                RenderBOMSeleccionEnPanel(table);

                if (table.Rows.Count == 0)
                {
                    MessageBox.Show("No se encontraron componentes para el TRW proporcionado.", "Sin resultados", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error al consultar BOM: {ex.Message}", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void RenderBOMSeleccionEnPanel(DataTable datos)
        {
            panel3.SuspendLayout();
            try
            {
                panel3.Controls.Clear();
                var grid = new DataGridView
                {
                    Dock = DockStyle.Fill,
                    ReadOnly = true,
                    AutoGenerateColumns = false,
                    AllowUserToAddRows = false,
                    AllowUserToDeleteRows = false,
                    RowHeadersVisible = false,
                    SelectionMode = DataGridViewSelectionMode.FullRowSelect
                };

                var colCode = new DataGridViewTextBoxColumn
                {
                    Name = "Component",
                    DataPropertyName = "Component",
                    HeaderText = "Codigo",
                    Width = 160
                };
                var colDesc = new DataGridViewTextBoxColumn
                {
                    Name = "MaterialDescription",
                    DataPropertyName = "MaterialDescription",
                    HeaderText = "Nombre del componente",
                    AutoSizeMode = DataGridViewAutoSizeColumnMode.Fill,
                    ReadOnly = true,
                    SortMode = DataGridViewColumnSortMode.NotSortable
                };
                var colAdd = new DataGridViewButtonColumn
                {
                    Name = "Add",
                    HeaderText = "",
                    Text = "Agregar",
                    UseColumnTextForButtonValue = true,
                    Width = 90
                };

                grid.Columns.Add(colCode);
                grid.Columns.Add(colDesc);
                grid.Columns.Add(colAdd);

                grid.CellContentClick += (s, e) =>
                {
                    if (e.RowIndex < 0) return;
                    if (grid.Columns[e.ColumnIndex].Name != "Add") return;

                    var drv = grid.Rows[e.RowIndex].DataBoundItem as DataRowView;
                    var compCode = drv?["Component"]?.ToString() ?? string.Empty;
                    var compName = drv?["MaterialDescription"]?.ToString() ?? string.Empty;

                    var qty = QuantityPrompt.Show(this, "Agregar componente", $"Ingrese la cantidad para {compCode}", 1m, 3);
                    if (qty is null) return;
                    if (qty.Value <= 0)
                    {
                        MessageBox.Show("La cantidad debe ser mayor que 0.", "Aviso", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        return;
                    }

                    var registroId = Guid.NewGuid().ToString();

                    var newRow = _boleta.NewRow();
                    // Dejar Turno/Linea en blanco como indicas
                    newRow["Turno"] = string.Empty;
                    newRow["Linea"] = string.Empty;
                    // Numero de Parte = código del componente agregado
                    newRow["NumeroParte"] = compCode;
                    // Descripcion del Defecto = nombre del componente
                    newRow["DescripcionDefecto"] = compName;
                    // Cantidad = cantidad seleccionada
                    newRow["Cantidad"] = qty.Value;
                    // Resto de campos en blanco
                    newRow["ComponenteCodigo"] = string.Empty;
                    newRow["Componente"] = string.Empty;
                    newRow["Unidad"] = string.Empty;
                    newRow["RegistroId"] = registroId;
                    newRow["Omitido"] = false;
                    newRow["Origen"] = "TRW";
                    _boleta.Rows.Add(newRow);

                    MostrarBoletaForm();
                };

                grid.DataSource = datos;
                panel3.Controls.Add(grid);
            }
            finally
            {
                panel3.ResumeLayout();
            }
        }

        private void txtNumber_TextChanged(object sender, EventArgs e)
        {

        }
    }
}
